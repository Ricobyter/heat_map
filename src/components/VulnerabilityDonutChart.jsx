import React, { useMemo, useState, useCallback } from "react";
import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from "recharts";

// Areas (km²) per block
const areaMap = {
  Dhanarua: 183.40,
  Naubatpur: 168.03,
  Masaurhi: 202.26,
  Maner: 171.96,
  Pandarak: 205.75,
  Barh: 120.19,
  Athmalgola: 50.41,
  Belchhi: 69.65,
  Khusrupur: 63.10,
  Fatwah: 125.98,
  Ghoswari: 138.61,
  Bihta: 198.16,
  Sampatchak: 63.81,
  Punpun: 130.78,
  Paliganj: 238.78,
  Bikram: 152.79,
  "Dulhin Bazar": 108.43,
  Bakhtiyarpur: 171.16,
  Mokama: 194.23,
  "Patna Sadar": 148.91,
  Daniyawan: 65.37,
  Danapur: 128.18,
  "Phulwari Sharif": 110.20,
};

// Data groups
const districtData = {
  Low: ["Masaurhi", "Pandarak", "Sampatchak", "Bikram", "Dulhin Bazar"],
  Medium: ["Dhanarua", "Fatwah", "Bihta", "Punpun"],
  High: [
    "Naubatpur",
    "Maner",
    "Barh",
    "Athmalgola",
    "Belchhi",
    "Khusrupur",
    "Ghoswari",
    "Paliganj",
    "Bakhtiyarpur",
    "Mokama",
    "Patna Sadar",
    "Daniyawan",
    "Danapur",
    "Phulwari Sharif",
  ],
};

const COLORS = { High: "#ec645f", Medium: "#f5a319", Low: "#e7d55a" };
const TRACKS = { High: "#f9e0df", Medium: "#fde7c6", Low: "#f5f1cf" };

const toPercent = (n, d) => ((n / d) * 100).toFixed(1);

// Tooltip updated to show area-based percentage and km²
const CustomTooltip = ({ active, hoveredCategory, chart }) => {
  if (!active || !hoveredCategory) return null;
  const info = chart?.[hoveredCategory];
  if (!info) return null;

  return (
    <div className="bg-white border rounded shadow p-2 text-xs max-w-[260px]">
      <div className="font-bold mb-1">{hoveredCategory} Vulnerability</div>
      <div className="mb-1 text-[13px] font-semibold text-slate-600">
        {info.percentText} of total area
      </div>
      <div className="mb-1 text-[13px] text-slate-600">{info.areaText} km²</div>
      <div className="text-[11px] leading-snug">{info.items.join(", ")}</div>
    </div>
  );
};

export default function VulnerabilityDonutChart() {
  const [hoveredCategory, setHoveredCategory] = useState(null);

  const chart = useMemo(() => {
    const sumCategoryArea = (blocks) =>
      blocks.reduce((sum, b) => sum + (areaMap[b] || 0), 0);

    const totalArea =
      sumCategoryArea(districtData.Low) +
      sumCategoryArea(districtData.Medium) +
      sumCategoryArea(districtData.High);

    const build = (key) => {
      const area = sumCategoryArea(districtData[key]);
      const percent = toPercent(area, totalArea);
      return {
        key,
        value: area, // use area as ring value
        color: COLORS[key],
        track: TRACKS[key],
        percentText: `${percent}%`,
        areaText: area.toFixed(2),
        items: districtData[key],
        total: totalArea,
      };
    };

    return {
      total: totalArea,
      High: build("High"),
      Medium: build("Medium"),
      Low: build("Low"),
    };
  }, []);

  // Geometry
  const size = 180;
  const center = "50%";
  const outerR = 84;
  const gap = 10;
  const thickness = 14;
  const padAngle = 3;

  // Angles (clockwise)
  const START = 210;
  const END = -150;

  // Hover handlers
  const handleEnter = useCallback((cat) => () => setHoveredCategory(cat), []);
  const handleLeave = useCallback(() => setHoveredCategory(null), []);

  // One ring: background + [visible, filler]
  const Ring = ({ cat, inner, outer }) => {
    const visible = chart[cat].value;
    const filler = Math.max(chart.total - visible, 0);

    const dataVisible = [
      {
        value: visible,
        key: cat,
        meta: {
          percentText: chart[cat].percentText,
          items: chart[cat].items,
        },
      },
      { value: filler, key: `${cat}-filler` },
    ];

    return (
      <>
        {/* Track */}
        <Pie
          data={[{ value: 1 }]}
          dataKey="value"
          cx={center}
          cy={center}
          startAngle={START}
          endAngle={END}
          innerRadius={inner}
          outerRadius={outer}
          isAnimationActive={false}
          paddingAngle={0}
          stroke="none"
        >
          <Cell fill={chart[cat].track} />
        </Pie>

        {/* Data */}
        <Pie
          data={dataVisible}
          nameKey="key"
          dataKey="value"
          cx={center}
          cy={center}
          startAngle={START}
          endAngle={END}
          innerRadius={inner}
          outerRadius={outer}
          label={false}
          labelLine={false}
          paddingAngle={padAngle}
          isAnimationActive
          stroke="none"
          cornerRadius={10}
          onMouseEnter={handleEnter(cat)}
          onMouseMove={handleEnter(cat)}
          onMouseLeave={handleLeave}
        >
          <Cell fill={chart[cat].color} />
          <Cell fill="transparent" />
        </Pie>
      </>
    );
  };

  return (
    <div className="w-full max-w-sm bg-white">
                        <h2 className="text-center text-sm font-semibold mb-4">
        Heat Vulnerability by Area 
      </h2>
      <div className="relative flex items-center justify-center">
        <ResponsiveContainer width={size} height={size}>
          <PieChart>
            <Ring cat="High" inner={outerR - thickness} outer={outerR} />
            <Ring
              cat="Medium"
              inner={outerR - thickness - gap - thickness}
              outer={outerR - thickness - gap}
            />
            <Ring
              cat="Low"
              inner={outerR - 2 * (thickness + gap) - thickness}
              outer={outerR - 2 * (thickness + gap)}
            />
            <Tooltip
              content={
                <CustomTooltip
                  hoveredCategory={hoveredCategory}
                  chart={chart}
                />
              }
            />
          </PieChart>
        </ResponsiveContainer>
      </div>

      {/* Legend */}
      <div className="mt-2 flex items-center gap-4 justify-center text-[12px]">
        <div className="flex items-center gap-2">
          <span
            className="inline-block h-2.5 w-2.5 rounded-full"
            style={{ background: COLORS.High }}
          />
          <span className="text-slate-700">High</span>
        </div>
        <div className="flex items-center gap-2">
          <span
            className="inline-block h-2.5 w-2.5 rounded-full"
            style={{ background: COLORS.Medium }}
          />
          <span className="text-slate-700">Medium</span>
        </div>
        <div className="flex items-center gap-2">
          <span
            className="inline-block h-2.5 w-2.5 rounded-full"
            style={{ background: COLORS.Low }}
          />
          <span className="text-slate-700">Low</span>
        </div>
      </div>
    </div>
  );
}
